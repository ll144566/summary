diff --git a/frameworks/base/cmds/bootanimation/BootAnimation.cpp b/frameworks/base/cmds/bootanimation/BootAnimation.cpp
index db84a57ec8..10faff0a4c 100644
--- a/frameworks/base/cmds/bootanimation/BootAnimation.cpp
+++ b/frameworks/base/cmds/bootanimation/BootAnimation.cpp
@@ -345,12 +345,20 @@ status_t BootAnimation::readyToRun() {
     status_t status = SurfaceComposerClient::getDisplayInfo(mDisplayToken, &dinfo);
     if (status)
         return -1;
-
+    char rAngleValue[PROPERTY_VALUE_MAX];
+    property_get("persist.panel.orientation", rAngleValue, "0");
+    int rAngle = atoi(rAngleValue);
     // create the native surface
+
     sp<SurfaceControl> control = session()->createSurface(String8("BootAnimation"),
-            dinfo.w, dinfo.h, PIXEL_FORMAT_RGB_565);
+        (rAngle == 90 || rAngle == 270) ? dinfo.h : dinfo.w,
+        (rAngle == 90 || rAngle == 270) ? dinfo.w : dinfo.h, PIXEL_FORMAT_RGB_565);
 
     SurfaceComposerClient::Transaction t;
+    Rect destRect((rAngle == 90 || rAngle == 270) ? dinfo.h : dinfo.w,
+                  (rAngle == 90 || rAngle == 270) ? dinfo.w : dinfo.h);
+    t.setDisplayProjection(mDisplayToken, rAngle/90 , destRect, destRect);
+    t.apply();
     t.setLayer(control, 0x40000000)
         .apply();
 
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/qs/tiles/RotationLockTile.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/qs/tiles/RotationLockTile.java
index 7ca1e44c93..6fd7ec1ae5 100644
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/qs/tiles/RotationLockTile.java
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/qs/tiles/RotationLockTile.java
@@ -19,6 +19,7 @@ package com.android.systemui.qs.tiles;
 import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
+import android.os.SystemProperties;
 import android.provider.Settings;
 import android.service.quicksettings.Tile;
 import android.widget.Switch;
@@ -30,7 +31,7 @@ import com.android.systemui.qs.QSHost;
 import com.android.systemui.qs.tileimpl.QSTileImpl;
 import com.android.systemui.statusbar.policy.RotationLockController;
 import com.android.systemui.statusbar.policy.RotationLockController.RotationLockControllerCallback;
-
+import android.util.Log;
 import javax.inject.Inject;
 
 /** Quick settings tile: Rotation **/
@@ -38,12 +39,17 @@ public class RotationLockTile extends QSTileImpl<BooleanState> {
 
     private final Icon mIcon = ResourceIcon.get(com.android.internal.R.drawable.ic_qs_auto_rotate);
     private final RotationLockController mController;
+    private boolean defaultOrientation;
 
     @Inject
     public RotationLockTile(QSHost host, RotationLockController rotationLockController) {
         super(host);
         mController = rotationLockController;
         mController.observe(this, mCallback);
+        defaultOrientation = "0".equals(SystemProperties.get("persist.panel.orientation", "0"));
+        if(!defaultOrientation){
+            Settings.System.putInt(mContext.getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, 1);
+        }
     }
 
     @Override
@@ -61,9 +67,11 @@ public class RotationLockTile extends QSTileImpl<BooleanState> {
 
     @Override
     protected void handleClick() {
-        final boolean newState = !mState.value;
-        mController.setRotationLocked(!newState);
-        refreshState(newState);
+        if(defaultOrientation){
+            final boolean newState = !mState.value;
+            mController.setRotationLocked(!newState);
+            refreshState(newState);
+        }
     }
 
     @Override
diff --git a/frameworks/base/services/core/java/com/android/server/wm/DisplayContent.java b/frameworks/base/services/core/java/com/android/server/wm/DisplayContent.java
index 5a5b75c736..8a408f8418 100644
--- a/frameworks/base/services/core/java/com/android/server/wm/DisplayContent.java
+++ b/frameworks/base/services/core/java/com/android/server/wm/DisplayContent.java
@@ -30,6 +30,7 @@ import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_USER;
 import static android.content.res.Configuration.ORIENTATION_LANDSCAPE;
 import static android.content.res.Configuration.ORIENTATION_PORTRAIT;
 import static android.os.Trace.TRACE_TAG_WINDOW_MANAGER;
+import android.os.SystemProperties;
 import static android.util.DisplayMetrics.DENSITY_DEFAULT;
 import static android.view.Display.DEFAULT_DISPLAY;
 import static android.view.Display.FLAG_PRIVATE;
@@ -360,7 +361,7 @@ class DisplayContent extends WindowContainer<DisplayContent.DisplayChildWindowCo
      *
      * @see #updateRotationUnchecked()
      */
-    private int mRotation = 0;
+    private int mRotation = SystemProperties.getInt("persist.panel.orientation", 0) / 90;
 
     /**
      * Last applied orientation of the display.
diff --git a/frameworks/base/services/core/java/com/android/server/wm/DisplayRotation.java b/frameworks/base/services/core/java/com/android/server/wm/DisplayRotation.java
index 6adff4e2de..f0e6cf4c64 100644
--- a/frameworks/base/services/core/java/com/android/server/wm/DisplayRotation.java
+++ b/frameworks/base/services/core/java/com/android/server/wm/DisplayRotation.java
@@ -75,6 +75,7 @@ public class DisplayRotation {
     private final int mCarDockRotation;
     private final int mDeskDockRotation;
     private final int mUndockedHdmiRotation;
+    private int mDefaultOrientation = Surface.ROTATION_0;
 
     private OrientationListener mOrientationListener;
     private StatusBarManagerInternal mStatusBarManagerInternal;
@@ -173,6 +174,18 @@ public class DisplayRotation {
             mSettingsObserver = new SettingsObserver(uiHandler);
             mSettingsObserver.observe();
         }
+        String defaultOrientation = SystemProperties.get("persist.panel.orientation", "0");
+        if("0".equals(defaultOrientation)) {
+            mDefaultOrientation = Surface.ROTATION_0;
+        } else if("90".equals(defaultOrientation)) {
+            mDefaultOrientation = Surface.ROTATION_90;
+        } else if("180".equals(defaultOrientation)) {
+            mDefaultOrientation = Surface.ROTATION_180;
+        } else if("270".equals(defaultOrientation)) {
+            mDefaultOrientation = Surface.ROTATION_270;
+        } else {
+            mDefaultOrientation = Surface.ROTATION_0;
+        }
     }
 
     private int readRotation(int resID) {
@@ -704,7 +717,7 @@ public class DisplayRotation {
                 if (preferredRotation >= 0) {
                     return preferredRotation;
                 }
-                return Surface.ROTATION_0;
+                return mDefaultOrientation;
         }
     }
 
diff --git a/frameworks/native/services/surfaceflinger/DisplayDevice.cpp b/frameworks/native/services/surfaceflinger/DisplayDevice.cpp
index f4407fc6c7..a2dcbac3f3 100644
--- a/frameworks/native/services/surfaceflinger/DisplayDevice.cpp
+++ b/frameworks/native/services/surfaceflinger/DisplayDevice.cpp
@@ -32,6 +32,7 @@
 #include <log/log.h>
 #include <system/window.h>
 #include <ui/GraphicTypes.h>
+#include <cutils/properties.h>
 
 #include "DisplayDevice.h"
 #include "Layer.h"
@@ -91,9 +92,30 @@ DisplayDevice::DisplayDevice(DisplayDeviceCreationArgs&& args)
     mCompositionDisplay->getRenderSurface()->initialize();
 
     setPowerMode(args.initialPowerMode);
+    char property[PROPERTY_VALUE_MAX];
+    int defaultOrientation = 0;
+    property_get("persist.panel.orientation", property, "0");
+    defaultOrientation = atoi(property);
+    switch(defaultOrientation) {
+        case 0:
+            defaultOrientation = DisplayState::eOrientationDefault;
+            break;
+        case 90:
+            defaultOrientation = DisplayState::eOrientation90;
+            break;
+        case 180:
+            defaultOrientation = DisplayState::eOrientation180;
+            break;
+        case 270:
+            defaultOrientation = DisplayState::eOrientation270;
+            break;
+        default:
+            defaultOrientation = DisplayState::eOrientationDefault;
+            break;
+    }
 
     // initialize the display orientation transform.
-    setProjection(DisplayState::eOrientationDefault, Rect::INVALID_RECT, Rect::INVALID_RECT);
+    setProjection(defaultOrientation, Rect::INVALID_RECT, Rect::INVALID_RECT);
 }
 
 DisplayDevice::~DisplayDevice() = default;
@@ -242,7 +264,8 @@ void DisplayDevice::setProjection(int orientation,
         if (R.getOrientation() & ui::Transform::ROT_90) {
             // viewport is always specified in the logical orientation
             // of the display (ie: post-rotation).
-            std::swap(viewport.right, viewport.bottom);
+            //std::swap(viewport.right, viewport.bottom);
+            std::swap(frame.right, frame.bottom);
         }
     }
 
